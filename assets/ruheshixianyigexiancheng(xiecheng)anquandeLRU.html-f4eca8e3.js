import { _ as _export_sfc, o as openBlock, c as createElementBlock, e as createStaticVNode } from "./app-24108d2f.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<h1 id="如何实现一个线程-协程-安全的lru" tabindex="-1"><a class="header-anchor" href="#如何实现一个线程-协程-安全的lru" aria-hidden="true">#</a> 如何实现一个线程(协程)安全的LRU</h1><h2 id="前情提要" tabindex="-1"><a class="header-anchor" href="#前情提要" aria-hidden="true">#</a> 前情提要</h2><p>今天面试腾讯提前批的时候，被考到了这道算法题，首先我背写了简单的LRU算法，然后想用互斥锁的方式进行优化，但面试官说不够好，他希望看到用channel进行高性能的无锁LRU，我心想这是有点难，尤其是面试下，所以最后只写了一个简单的互斥锁版本(已用AI添加注释)，如下节所示：</p><h3 id="无锁lru的实现——互斥锁" tabindex="-1"><a class="header-anchor" href="#无锁lru的实现——互斥锁" aria-hidden="true">#</a> 无锁LRU的实现——互斥锁</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n	<span class="token string">&quot;fmt&quot;</span>\n	<span class="token string">&quot;sync&quot;</span> <span class="token comment">// Import the sync package</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// Node represents a node in the doubly linked list.</span>\n<span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	Key  <span class="token builtin">int</span>\n	Val  <span class="token builtin">int</span>\n	Next <span class="token operator">*</span>Node\n	Prev <span class="token operator">*</span>Node\n<span class="token punctuation">}</span>\n\n<span class="token comment">// LRUCache implements a thread-safe Least Recently Used (LRU) cache.</span>\n<span class="token keyword">type</span> LRUCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	Cap   <span class="token builtin">int</span>\n	Len   <span class="token builtin">int</span>\n	Cache <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>Node\n	head  <span class="token operator">*</span>Node\n	tail  <span class="token operator">*</span>Node\n	mu    sync<span class="token punctuation">.</span>Mutex <span class="token comment">// Add a mutex for thread safety</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Constructor creates and returns a new LRUCache.</span>\n<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> LRUCache <span class="token punctuation">{</span>\n	head <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span>\n	tail <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span>\n	head<span class="token punctuation">.</span>Next <span class="token operator">=</span> tail\n	tail<span class="token punctuation">.</span>Prev <span class="token operator">=</span> head\n	<span class="token keyword">return</span> LRUCache<span class="token punctuation">{</span>\n		Cap<span class="token punctuation">:</span>   <span class="token builtin">cap</span><span class="token punctuation">,</span>\n		Len<span class="token punctuation">:</span>   <span class="token number">0</span><span class="token punctuation">,</span>\n		head<span class="token punctuation">:</span>  head<span class="token punctuation">,</span>\n		tail<span class="token punctuation">:</span>  tail<span class="token punctuation">,</span>\n		Cache<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">)</span><span class="token punctuation">,</span>\n		mu<span class="token punctuation">:</span>    sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Initialize the mutex</span>\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// moveToHead moves a node to the head of the doubly linked list.</span>\n<span class="token comment">// This function assumes the mutex is already locked by the caller.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	l<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n	l<span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// insertHead inserts a node at the head of the doubly linked list.</span>\n<span class="token comment">// This function assumes the mutex is already locked by the caller.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">insertHead</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	next <span class="token operator">:=</span> l<span class="token punctuation">.</span>head<span class="token punctuation">.</span>Next\n	next<span class="token punctuation">.</span>Prev <span class="token operator">=</span> node\n	node<span class="token punctuation">.</span>Prev <span class="token operator">=</span> l<span class="token punctuation">.</span>head\n	node<span class="token punctuation">.</span>Next <span class="token operator">=</span> next\n	l<span class="token punctuation">.</span>head<span class="token punctuation">.</span>Next <span class="token operator">=</span> node\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Full checks if the cache has exceeded its capacity.</span>\n<span class="token comment">// This function assumes the mutex is already locked by the caller.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n	<span class="token keyword">return</span> l<span class="token punctuation">.</span>Len <span class="token operator">&gt;=</span> l<span class="token punctuation">.</span>Cap <span class="token comment">// Use &gt;= for clarity, as Length could technically be Cap + 1 before removal</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// removeFromTail removes the least recently used node (from the tail).</span>\n<span class="token comment">// This function assumes the mutex is already locked by the caller.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">removeFromTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	node <span class="token operator">:=</span> l<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>Prev\n	<span class="token keyword">if</span> node <span class="token operator">!=</span> l<span class="token punctuation">.</span>head <span class="token punctuation">{</span> <span class="token comment">// Ensure we don&#39;t try to remove the dummy head</span>\n		l<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n		l<span class="token punctuation">.</span>Len<span class="token operator">--</span> <span class="token comment">// Decrement length when a node is removed</span>\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// remove removes a specific node from the doubly linked list and cache map.</span>\n<span class="token comment">// This function assumes the mutex is already locked by the caller.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">remove</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	node<span class="token punctuation">.</span>Prev<span class="token punctuation">.</span>Next <span class="token operator">=</span> node<span class="token punctuation">.</span>Next\n	node<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Prev <span class="token operator">=</span> node<span class="token punctuation">.</span>Prev\n	<span class="token function">delete</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Cache<span class="token punctuation">,</span> node<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Put adds or updates a key-value pair in the cache.</span>\n<span class="token comment">// It ensures thread safety using a mutex.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Lock the mutex at the beginning of the function</span>\n	<span class="token keyword">defer</span> l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Unlock the mutex when the function exits</span>\n\n	<span class="token keyword">if</span> node<span class="token punctuation">,</span> ok <span class="token operator">:=</span> l<span class="token punctuation">.</span>Cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n		<span class="token comment">// Key exists, update value and move to head</span>\n		node<span class="token punctuation">.</span>Val <span class="token operator">=</span> val\n		l<span class="token punctuation">.</span><span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n		<span class="token comment">// Key does not exist, create new node</span>\n		node <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>Key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> Val<span class="token punctuation">:</span> val<span class="token punctuation">}</span>\n		l<span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n		l<span class="token punctuation">.</span>Cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node\n		l<span class="token punctuation">.</span>Len<span class="token operator">++</span> <span class="token comment">// Increment length when a new node is added</span>\n\n		<span class="token keyword">if</span> l<span class="token punctuation">.</span><span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n			l<span class="token punctuation">.</span><span class="token function">removeFromTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n		<span class="token punctuation">}</span>\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Get retrieves the value for a given key from the cache.</span>\n<span class="token comment">// It ensures thread safety using a mutex.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRUCache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n	l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Lock the mutex at the beginning of the function</span>\n	<span class="token keyword">defer</span> l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Unlock the mutex when the function exits</span>\n\n	<span class="token keyword">if</span> node<span class="token punctuation">,</span> ok <span class="token operator">:=</span> l<span class="token punctuation">.</span>Cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n		<span class="token comment">// Key found, move to head and return value</span>\n		l<span class="token punctuation">.</span><span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n		<span class="token keyword">return</span> node<span class="token punctuation">.</span>Val\n	<span class="token punctuation">}</span>\n	<span class="token comment">// Key not found</span>\n	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	lru <span class="token operator">:=</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n	lru<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n	lru<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Expected: 1 (2 becomes MRU, 1 becomes LRU. Accessing 1 makes it MRU again.)</span>\n\n	lru<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment">// Evicts 2 (2 was LRU)</span>\n	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Expected: -1 (2 was evicted)</span>\n\n	lru<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>           <span class="token comment">// Evicts 1 (1 was LRU)</span>\n	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Expected: -1 (1 was evicted)</span>\n	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Expected: 3 (3 is now MRU)</span>\n	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Expected: 4 (4 is now MRU)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我的实现不能用读写锁，这是因为在Get请求中，需要先获取读锁，但后续的<code>moveToHead</code>操作需要获取写锁，这会导致死锁。因为在<code>moveToHead</code>中，先解锁读锁，然后再获取写锁，而如果有其他线程持有写锁，就会导致死锁（虽然面试官说问题不在这，但我保持怀疑）。</p><p>对于这个方法，其实还有一个优化的点就是其中的map，实际上可以使用<code>sync.Map</code>来替代，这样可以在读操作大于写操作的场景下，减少锁的竞争，提升性能。</p><h2 id="无锁lru的实现——channel" tabindex="-1"><a class="header-anchor" href="#无锁lru的实现——channel" aria-hidden="true">#</a> 无锁LRU的实现——channel</h2><p>接下来进入重点，当然channel的实现是无锁编程，所以确实会能够做到优化，思路上，首先，需要启动一个独立的goroutine来接收请求，同时，它会从所有的请求channel中读取数据，执行相应的LRU操作，get和put这两个操作不再直接操作lru，而是发请求给另一个goroutine。</p><p>修改后的版本如下:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	Key  <span class="token builtin">int</span>\n	Val  <span class="token builtin">int</span>\n	Next <span class="token operator">*</span>Node\n	Prev <span class="token operator">*</span>Node\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> LRU <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	Cap   <span class="token builtin">int</span>\n	Len   <span class="token builtin">int</span>\n	Cache <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>Node\n	head  <span class="token operator">*</span>Node\n	tail  <span class="token operator">*</span>Node\n\n	requests <span class="token keyword">chan</span> Request\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n	op   <span class="token builtin">int</span>\n	key  <span class="token builtin">int</span>\n	val  <span class="token builtin">int</span>\n	resp <span class="token keyword">chan</span> <span class="token builtin">int</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>LRU <span class="token punctuation">{</span>\n	head <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span>\n	tail <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span>\n	head<span class="token punctuation">.</span>Next <span class="token operator">=</span> tail\n	tail<span class="token punctuation">.</span>Prev <span class="token operator">=</span> head\n	lru <span class="token operator">:=</span> <span class="token operator">&amp;</span>LRU<span class="token punctuation">{</span>\n		Cap<span class="token punctuation">:</span>      <span class="token builtin">cap</span><span class="token punctuation">,</span>\n		Len<span class="token punctuation">:</span>      <span class="token number">0</span><span class="token punctuation">,</span>\n		head<span class="token punctuation">:</span>     head<span class="token punctuation">,</span>\n		tail<span class="token punctuation">:</span>     tail<span class="token punctuation">,</span>\n		Cache<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>Node<span class="token punctuation">)</span><span class="token punctuation">,</span>\n		requests<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Request<span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">}</span>\n\n	<span class="token keyword">go</span> lru<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n	<span class="token keyword">return</span> lru\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	<span class="token keyword">for</span> req <span class="token operator">:=</span> <span class="token keyword">range</span> l<span class="token punctuation">.</span>requests <span class="token punctuation">{</span> <span class="token comment">// Continuously process requests</span>\n		<span class="token keyword">switch</span> req<span class="token punctuation">.</span>op <span class="token punctuation">{</span>\n		<span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">// Get operation</span>\n			<span class="token keyword">if</span> node<span class="token punctuation">,</span> ok <span class="token operator">:=</span> l<span class="token punctuation">.</span>Cache<span class="token punctuation">[</span>req<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n				l<span class="token punctuation">.</span><span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n				req<span class="token punctuation">.</span>resp <span class="token operator">&lt;-</span> node<span class="token punctuation">.</span>Val\n			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n				req<span class="token punctuation">.</span>resp <span class="token operator">&lt;-</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// Key not found</span>\n			<span class="token punctuation">}</span>\n		<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment">// Put operation</span>\n			<span class="token keyword">if</span> node<span class="token punctuation">,</span> ok <span class="token operator">:=</span> l<span class="token punctuation">.</span>Cache<span class="token punctuation">[</span>req<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n				node<span class="token punctuation">.</span>Val <span class="token operator">=</span> req<span class="token punctuation">.</span>val\n				l<span class="token punctuation">.</span><span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n				node <span class="token operator">:=</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span>Key<span class="token punctuation">:</span> req<span class="token punctuation">.</span>key<span class="token punctuation">,</span> Val<span class="token punctuation">:</span> req<span class="token punctuation">.</span>val<span class="token punctuation">}</span>\n				l<span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n				l<span class="token punctuation">.</span>Cache<span class="token punctuation">[</span>req<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node\n				l<span class="token punctuation">.</span>Len<span class="token operator">++</span>\n				<span class="token keyword">if</span> l<span class="token punctuation">.</span><span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n					l<span class="token punctuation">.</span><span class="token function">removeFromTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Evict LRU</span>\n				<span class="token punctuation">}</span>\n			<span class="token punctuation">}</span>\n			req<span class="token punctuation">.</span>resp <span class="token operator">&lt;-</span> <span class="token number">0</span> <span class="token comment">// Acknowledge Put operation (can be any int)</span>\n		<span class="token punctuation">}</span>\n	<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	l<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n	l<span class="token punctuation">.</span><span class="token function">insertHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">insertHead</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	next <span class="token operator">:=</span> l<span class="token punctuation">.</span>head<span class="token punctuation">.</span>Next\n	next<span class="token punctuation">.</span>Prev <span class="token operator">=</span> node\n	node<span class="token punctuation">.</span>Prev <span class="token operator">=</span> l<span class="token punctuation">.</span>head\n	node<span class="token punctuation">.</span>Next <span class="token operator">=</span> next\n	l<span class="token punctuation">.</span>head<span class="token punctuation">.</span>Next <span class="token operator">=</span> node\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n	<span class="token keyword">return</span> l<span class="token punctuation">.</span>Len <span class="token operator">&gt;</span> l<span class="token punctuation">.</span>Cap\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">removeFromTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	node <span class="token operator">:=</span> l<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>Prev\n	l<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">remove</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	node<span class="token punctuation">.</span>Prev<span class="token punctuation">.</span>Next <span class="token operator">=</span> node<span class="token punctuation">.</span>Next\n	node<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Prev <span class="token operator">=</span> node<span class="token punctuation">.</span>Prev\n	<span class="token function">delete</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>Cache<span class="token punctuation">,</span> node<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Get sends a Get request to the cache goroutine and waits for the response.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n	resp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Buffered channel for response</span>\n	l<span class="token punctuation">.</span>requests <span class="token operator">&lt;-</span> Request<span class="token punctuation">{</span>op<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> resp<span class="token punctuation">:</span> resp<span class="token punctuation">}</span>\n	<span class="token keyword">return</span> <span class="token operator">&lt;-</span>resp\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Put sends a Put request to the cache goroutine and waits for acknowledgment.</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>LRU<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n	resp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Buffered channel for acknowledgment</span>\n	l<span class="token punctuation">.</span>requests <span class="token operator">&lt;-</span> Request<span class="token punctuation">{</span>op<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> val<span class="token punctuation">:</span> val<span class="token punctuation">,</span> resp<span class="token punctuation">:</span> resp<span class="token punctuation">}</span>\n	<span class="token operator">&lt;-</span>resp <span class="token comment">// Wait for acknowledgment</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现思路上，首先，定义了一个<code>Request</code>结构体来封装请求类型、键、值和响应通道。然后，在<code>New</code>函数中创建了一个新的LRU实例，并启动了一个独立的goroutine来处理所有的请求。Get和Put操作不再直接操作LRU，而是通过发送请求到<code>requests</code>通道中。同时传输的结构体中也包含响应通道，当请求处理完后，LRU可以将结果通过响应通道返回给调用者，如果是Get操作，则返回对应的值，如果是Put操作，则返回一个简单的确认值（代码里设置为0）。</p><p>同时，为了完善这个函数，还可以加入graceful shutdown的逻辑，确保在程序退出时能够正确关闭请求通道，避免goroutine泄漏。具体的操作时添加一个stopChan，当lru的run函数接受对应信号是，关闭stopChan和requests。这个Stop的逻辑可以用defer。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这道题虽然刁钻，但还是挺有意思的，只不过面试里考，实在是有点（</p>', 15)
  ]));
}
const ruheshixianyigexiancheng_xiecheng_anquandeLRU_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "ruheshixianyigexiancheng(xiecheng)anquandeLRU.html.vue"]]);
export {
  ruheshixianyigexiancheng_xiecheng_anquandeLRU_html as default
};
